-- AWS Cognito-integrated database schema for Transcription Evaluator
-- This schema references Cognito users by their sub (UUID) instead of storing user data locally

-- Extension for UUID generation
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- User profiles table (minimal, references Cognito)
-- Stores only application-specific data, not authentication data
CREATE TABLE user_profiles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    cognito_user_id VARCHAR(255) UNIQUE NOT NULL, -- Cognito sub claim
    email VARCHAR(255) UNIQUE NOT NULL,
    full_name VARCHAR(255) NOT NULL,
    department VARCHAR(100),
    role_level INTEGER CHECK (role_level BETWEEN 1 AND 4),
    preferences JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE
);

-- Index for fast Cognito user lookups
CREATE INDEX idx_user_profiles_cognito_user_id ON user_profiles(cognito_user_id);
CREATE INDEX idx_user_profiles_email ON user_profiles(email);

-- Scripts table for voice actor content
CREATE TABLE scripts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    title VARCHAR(500) NOT NULL,
    content TEXT NOT NULL,
    medical_vertical VARCHAR(100),
    difficulty_level INTEGER CHECK (difficulty_level BETWEEN 1 AND 5),
    estimated_duration_seconds INTEGER,
    created_by_cognito_id VARCHAR(255) NOT NULL, -- References Cognito user
    status VARCHAR(50) DEFAULT 'draft' CHECK (status IN ('draft', 'active', 'archived', 'under_review')),
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key reference to user profiles
    CONSTRAINT fk_scripts_created_by FOREIGN KEY (created_by_cognito_id) 
        REFERENCES user_profiles(cognito_user_id) ON DELETE RESTRICT
);

-- Indexes for scripts
CREATE INDEX idx_scripts_created_by ON scripts(created_by_cognito_id);
CREATE INDEX idx_scripts_status ON scripts(status);
CREATE INDEX idx_scripts_medical_vertical ON scripts(medical_vertical);
CREATE INDEX idx_scripts_difficulty_level ON scripts(difficulty_level);

-- Audio recordings table
CREATE TABLE audio_recordings (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    script_id UUID NOT NULL,
    recorded_by_cognito_id VARCHAR(255) NOT NULL, -- References Cognito user
    s3_bucket VARCHAR(255) NOT NULL,
    s3_key VARCHAR(1000) NOT NULL,
    file_size_bytes BIGINT,
    duration_seconds DECIMAL(10, 3),
    audio_format VARCHAR(20),
    sample_rate INTEGER,
    recording_quality VARCHAR(20),
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraints
    CONSTRAINT fk_recordings_script FOREIGN KEY (script_id) 
        REFERENCES scripts(id) ON DELETE CASCADE,
    CONSTRAINT fk_recordings_recorded_by FOREIGN KEY (recorded_by_cognito_id) 
        REFERENCES user_profiles(cognito_user_id) ON DELETE RESTRICT
);

-- Indexes for audio recordings
CREATE INDEX idx_recordings_script_id ON audio_recordings(script_id);
CREATE INDEX idx_recordings_recorded_by ON audio_recordings(recorded_by_cognito_id);
CREATE INDEX idx_recordings_s3_location ON audio_recordings(s3_bucket, s3_key);

-- Transcriptions table (generated by ASR services)
CREATE TABLE transcriptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    audio_recording_id UUID NOT NULL,
    transcription_service VARCHAR(50) NOT NULL, -- 'deepgram', 'aws_transcribe', etc.
    transcription_text TEXT NOT NULL,
    confidence_score DECIMAL(5, 4),
    word_level_timestamps JSONB,
    service_metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraint
    CONSTRAINT fk_transcriptions_recording FOREIGN KEY (audio_recording_id) 
        REFERENCES audio_recordings(id) ON DELETE CASCADE
);

-- Indexes for transcriptions
CREATE INDEX idx_transcriptions_recording_id ON transcriptions(audio_recording_id);
CREATE INDEX idx_transcriptions_service ON transcriptions(transcription_service);
CREATE INDEX idx_transcriptions_confidence ON transcriptions(confidence_score);

-- Evaluations table for quality assessment
CREATE TABLE evaluations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transcription_id UUID NOT NULL,
    evaluator_cognito_id VARCHAR(255) NOT NULL, -- References Cognito user
    evaluation_type VARCHAR(50) NOT NULL CHECK (evaluation_type IN ('accuracy', 'pronunciation', 'fluency', 'overall')),
    score DECIMAL(5, 2) CHECK (score BETWEEN 0 AND 100),
    detailed_feedback TEXT,
    corrections JSONB, -- Suggested corrections
    evaluation_criteria JSONB DEFAULT '{}',
    time_spent_seconds INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraints
    CONSTRAINT fk_evaluations_transcription FOREIGN KEY (transcription_id) 
        REFERENCES transcriptions(id) ON DELETE CASCADE,
    CONSTRAINT fk_evaluations_evaluator FOREIGN KEY (evaluator_cognito_id) 
        REFERENCES user_profiles(cognito_user_id) ON DELETE RESTRICT
);

-- Indexes for evaluations
CREATE INDEX idx_evaluations_transcription_id ON evaluations(transcription_id);
CREATE INDEX idx_evaluations_evaluator ON evaluations(evaluator_cognito_id);
CREATE INDEX idx_evaluations_type ON evaluations(evaluation_type);
CREATE INDEX idx_evaluations_score ON evaluations(score);

-- Script assignments table for workflow management
CREATE TABLE script_assignments (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    script_id UUID NOT NULL,
    assigned_to_cognito_id VARCHAR(255) NOT NULL, -- References Cognito user
    assigned_by_cognito_id VARCHAR(255) NOT NULL, -- References Cognito user
    assignment_type VARCHAR(50) NOT NULL CHECK (assignment_type IN ('record', 'evaluate', 'review')),
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'in_progress', 'completed', 'skipped')),
    priority INTEGER DEFAULT 3 CHECK (priority BETWEEN 1 AND 5),
    due_date TIMESTAMP WITH TIME ZONE,
    notes TEXT,
    completed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraints
    CONSTRAINT fk_assignments_script FOREIGN KEY (script_id) 
        REFERENCES scripts(id) ON DELETE CASCADE,
    CONSTRAINT fk_assignments_assigned_to FOREIGN KEY (assigned_to_cognito_id) 
        REFERENCES user_profiles(cognito_user_id) ON DELETE RESTRICT,
    CONSTRAINT fk_assignments_assigned_by FOREIGN KEY (assigned_by_cognito_id) 
        REFERENCES user_profiles(cognito_user_id) ON DELETE RESTRICT
);

-- Indexes for script assignments
CREATE INDEX idx_assignments_script_id ON script_assignments(script_id);
CREATE INDEX idx_assignments_assigned_to ON script_assignments(assigned_to_cognito_id);
CREATE INDEX idx_assignments_assigned_by ON script_assignments(assigned_by_cognito_id);
CREATE INDEX idx_assignments_status ON script_assignments(status);
CREATE INDEX idx_assignments_type ON script_assignments(assignment_type);
CREATE INDEX idx_assignments_due_date ON script_assignments(due_date);

-- Audit log table for tracking changes
CREATE TABLE audit_logs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    table_name VARCHAR(100) NOT NULL,
    record_id UUID NOT NULL,
    action VARCHAR(20) NOT NULL CHECK (action IN ('INSERT', 'UPDATE', 'DELETE')),
    old_values JSONB,
    new_values JSONB,
    changed_by_cognito_id VARCHAR(255), -- References Cognito user
    changed_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    ip_address INET,
    user_agent TEXT
);

-- Indexes for audit logs
CREATE INDEX idx_audit_logs_table_record ON audit_logs(table_name, record_id);
CREATE INDEX idx_audit_logs_changed_by ON audit_logs(changed_by_cognito_id);
CREATE INDEX idx_audit_logs_changed_at ON audit_logs(changed_at);

-- System settings table
CREATE TABLE system_settings (
    key VARCHAR(255) PRIMARY KEY,
    value JSONB NOT NULL,
    description TEXT,
    updated_by_cognito_id VARCHAR(255),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Foreign key constraint
    CONSTRAINT fk_settings_updated_by FOREIGN KEY (updated_by_cognito_id) 
        REFERENCES user_profiles(cognito_user_id) ON DELETE SET NULL
);

-- Update timestamp triggers
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply update triggers to relevant tables
CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_scripts_updated_at BEFORE UPDATE ON scripts 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_evaluations_updated_at BEFORE UPDATE ON evaluations 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_assignments_updated_at BEFORE UPDATE ON script_assignments 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Insert default system settings
INSERT INTO system_settings (key, value, description) VALUES
('max_file_size_mb', '100', 'Maximum audio file size in MB'),
('supported_audio_formats', '["wav", "mp3", "m4a", "flac"]', 'Supported audio file formats'),
('default_evaluation_criteria', '{"accuracy": 0.4, "pronunciation": 0.3, "fluency": 0.3}', 'Default weighting for evaluation criteria'),
('transcription_services', '{"primary": "deepgram", "fallback": "aws_transcribe"}', 'Transcription service configuration');

-- Sample data for testing (optional - remove in production)
-- INSERT INTO user_profiles (cognito_user_id, email, full_name, department, role_level) VALUES
-- ('test-admin-uuid', 'admin@example.com', 'System Administrator', 'IT', 1),
-- ('test-evaluator-uuid', 'evaluator@example.com', 'Senior Evaluator', 'Quality', 2),
-- ('test-voice-actor-uuid', 'actor@example.com', 'Voice Actor', 'Production', 4);

-- Views for common queries
CREATE VIEW user_profile_summary AS
SELECT 
    up.cognito_user_id,
    up.email,
    up.full_name,
    up.department,
    up.role_level,
    up.is_active,
    COUNT(DISTINCT s.id) as scripts_created,
    COUNT(DISTINCT ar.id) as recordings_made,
    COUNT(DISTINCT e.id) as evaluations_completed,
    up.created_at,
    up.updated_at
FROM user_profiles up
LEFT JOIN scripts s ON up.cognito_user_id = s.created_by_cognito_id
LEFT JOIN audio_recordings ar ON up.cognito_user_id = ar.recorded_by_cognito_id
LEFT JOIN evaluations e ON up.cognito_user_id = e.evaluator_cognito_id
GROUP BY up.cognito_user_id, up.email, up.full_name, up.department, up.role_level, up.is_active, up.created_at, up.updated_at;

-- Performance monitoring
CREATE VIEW script_completion_stats AS
SELECT 
    s.id as script_id,
    s.title,
    s.medical_vertical,
    s.difficulty_level,
    COUNT(DISTINCT ar.id) as total_recordings,
    COUNT(DISTINCT t.id) as total_transcriptions,
    COUNT(DISTINCT e.id) as total_evaluations,
    AVG(e.score) as average_score,
    s.created_at,
    s.status
FROM scripts s
LEFT JOIN audio_recordings ar ON s.id = ar.script_id
LEFT JOIN transcriptions t ON ar.id = t.audio_recording_id
LEFT JOIN evaluations e ON t.id = e.transcription_id
GROUP BY s.id, s.title, s.medical_vertical, s.difficulty_level, s.created_at, s.status;

-- Grant appropriate permissions (adjust based on your application user)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO transcription_app_user;
-- GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO transcription_app_user;
-- GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO transcription_app_user;